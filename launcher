#!/bin/bash

usage () {
  echo "Usage: launcher COMMAND CONFIG [--docker-args STRING]"
  echo "Commands:"
  echo "    start:      Start/initialize a container"
  echo "    stop:       Stop a running container"
  echo "    destroy:    Stop and remove a container"
  echo "    restart:    Restart a container"
  echo "    enter:      Open a shell to run commands inside the container"
  echo "    cleanup:    Remove all containers that have stopped for > 24 hours"
  exit 1
}

command=$1
config=${2:-dl_container}
user_args=""

while [ ${#} -gt 0 ]; do
  case "${1}" in
  --debug)
    DEBUG="1"
    ;;
  --docker-args)
    user_args="$2"
    echo $user_args
    shift
    ;;
  esac

  shift 1
done

# Docker doesn't like uppercase characters, spaces or special characters, catch it now before we build everything out and then find out
re='[A-Z/ !@#$%^&*()+~`=]'
if [[ $config =~ $re ]];
  then
    echo
    echo "ERROR: Config name must not contain upper case characters, spaces or special characters. Correct config name and rerun $0."
    echo
    exit 1
fi

cd "$(dirname "$0")"

docker_min_version='17.03.1'
docker_rec_version='17.06.2'
image=fantasticfears/dlzsh:latest
docker_path=`command -v nvidia-docker || command -v docker`
git_path=`which git`
git_min_version='1.8.0'
git_rec_version='1.8.0'

if [ "${SUPERVISED}" = "true" ]; then
  restart_policy="--restart=no"
  attach_on_start="-a"
  attach_on_run="-a stdout -a stderr"
else
  attach_on_run="-d"
fi

if [ -n "$DOCKER_HOST" ]; then
  docker_ip=`sed -e 's/^tcp:\/\/\(.*\):.*$/\1/' <<< "$DOCKER_HOST"`
elif [ -x "$(which ip 2>/dev/null)" ]; then
  docker_ip=`ip addr show docker0 | \
                  grep 'inet ' | \
                  awk '{ split($2,a,"/"); print a[1] }';`
else
  docker_ip=`ifconfig | \
                  grep -B1 "inet addr" | \
                  awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' | \
                  grep docker0 | \
                  awk -F: '{ print $3 }';`
fi

# From https://stackoverflow.com/a/44660519/702738
compare_version() {
    if [[ $1 == $2 ]]; then
        return 1
    fi
    local IFS=.
    local i a=(${1%%[^0-9.]*}) b=(${2%%[^0-9.]*})
    local arem=${1#${1%%[^0-9.]*}} brem=${2#${2%%[^0-9.]*}}
    for ((i=0; i<${#a[@]} || i<${#b[@]}; i++)); do
        if ((10#${a[i]:-0} < 10#${b[i]:-0})); then
            return 1
        elif ((10#${a[i]:-0} > 10#${b[i]:-0})); then
            return 0
        fi
    done
    if [ "$arem" '<' "$brem" ]; then
        return 1
    elif [ "$arem" '>' "$brem" ]; then
        return 0
    fi
    return 1
}


install_docker() {
  echo "Docker is not installed, you will need to install Docker in order to run Launcher"
  echo "See https://docs.docker.com/installation/"
  exit 1
}

check_prereqs() {

  if [ -z $docker_path ]; then
    install_docker
  fi

  # 1. docker daemon running?
  # we send stderr to /dev/null cause we don't care about warnings,
  # it usually complains about swap which does not matter
  test=`$docker_path info 2> /dev/null`
  if [[ $? -ne 0 ]] ; then
    echo "Cannot connect to the docker daemon - verify it is running and you have access"
    exit 1
  fi

  # 2. running an approved storage driver?
  if ! $docker_path info 2> /dev/null | egrep -q '^Storage Driver: (aufs|btrfs|zfs|overlay|overlay2)$'; then
    echo "Your Docker installation is not using a supported storage driver.  If we were to proceed you may have a broken install."
    echo "aufs is the recommended storage driver, although zfs/btrfs/overlay and overlay2 may work as well."
    echo "Other storage drivers are known to be problematic."
    echo "You can tell what filesystem you are using by running \"docker info\" and looking at the 'Storage Driver' line."
    echo
    echo "If you wish to continue anyway using your existing unsupported storage driver,"
    echo "read the source code of launcher and figure out how to bypass this check."
    exit 1
  fi

  # 3. running recommended docker version
  test=($($docker_path --version))  # Get docker version string
  test=${test[2]//,/}  # Get version alone and strip comma if exists

  # At least minimum docker version
  if compare_version "${docker_min_version}" "${test}"; then
    echo "ERROR: Docker version ${test} not supported, please upgrade to at least ${docker_min_version}, or recommended ${docker_rec_version}"
    exit 1
  fi

  # Recommend newer docker version
  if compare_version "${docker_rec_version}" "${test}"; then
    echo "WARNING: Docker version ${test} deprecated, recommend upgrade to ${docker_rec_version} or newer."
  fi

  # 4. discourse docker image is downloaded
  test=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$image"`

  if [ -z "$test" ]; then
    echo
    echo "WARNING: We are about to start downloading the base image"
    echo "This process may take anywhere between a few minutes to an hour, depending on your network speed"
    echo
    echo "Please be patient"
    echo
  fi

  # 5. running recommended git version
  test=($($git_path --version))  # Get git version string
  test=${test[2]//,/}  # Get version alone and strip comma if exists

  # At least minimum version
  if compare_version "${git_min_version}" "${test}"; then
    echo "ERROR: Git version ${test} not supported, please upgrade to at least ${git_min_version}, or recommended ${git_rec_version}"
    exit 1
  fi

  # Recommend best version
  if compare_version "${git_rec_version}" "${test}"; then
    echo "WARNING: Git version ${test} deprecated, recommend upgrade to ${git_rec_version} or newer."
  fi

  # 6. able to attach stderr / out / tty
  test=`$docker_path run $user_args -i --rm -a stdout -a stderr $image echo working`
  if [[ "$test" =~ "working" ]] ; then : ; else
    echo "Your Docker installation is not working correctly"
    echo
    echo "See: https://meta.discourse.org/t/docker-error-on-bootstrap/13657/18?u=sam"
    exit 1
  fi

  # 7. enough space for the bootstrap on docker folder
  folder=`$docker_path info --format '{{.DockerRootDir}}'`
  safe_folder=${folder:-/var/lib/docker}
  test=$(($(stat -f --format="%a*%S" $safe_folder)/1024**3 < 5))
  if [[ $test -ne 0 ]] ; then
    echo "You have less than 5GB of free space on the disk where $safe_folder is located. You will need more space to continue"
    df -h $safe_folder
    echo
    read -p "Would you like to attempt to recover space by cleaning docker images and containers in the system?(y/N)" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      docker system prune
      echo "If the cleanup was successful, you may try again now"
    fi
    exit 1
  fi
}


if [ -z "$SKIP_PREREQS" ] && [ "$command" != "cleanup" ]; then
  check_prereqs
fi

if [ -z $docker_path ]; then
  install_docker
fi

[ "$command" == "cleanup" ] && {
  echo
  echo "The following command will"
  echo "- Delete all docker images for old containers"
  echo "- Delete all stopped and orphan containers"
  echo
  read -p "Are you sure (Y/n): " -n 1 -r && echo
  if [[ $REPLY =~ ^[Yy]$ || ! $REPLY ]]
    then
      space=$(df /var/lib/docker | awk '{ print $4 }' | grep -v Available)
      echo "Starting Cleanup (bytes free $space)"

      STATE_DIR=./.gc-state scripts/docker-gc

      space=$(df /var/lib/docker | awk '{ print $4 }' | grep -v Available)
      echo "Finished Cleanup (bytes free $space)"

    else
      exit 1
  fi

  exit 0
}

if [ -z "$command" -a -z "$config" ]; then
  usage
fi

docker_version=($($docker_path --version))
docker_version=${test[2]//,/}
restart_policy=${restart_policy:---restart=always}

set_existing_container(){
  existing=`$docker_path ps -a | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
}

run_stop() {

  set_existing_container

  if [ ! -z $existing ]
     then
       (
        set -x
        $docker_path stop -t 10 $config
       )
     else
       echo "$config was not started !"
       exit 1
  fi
}

set_volumes() {
  home_addr=`echo ~`
  volumes="-v${home_addr}:/MIUN"
}

set_run_image() {
  run_image="$image"
}

set_boot_command() {
  boot_command="/bin/zsh"
}

run_start() {

   existing=`$docker_path ps | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
   echo $existing
   if [ ! -z $existing ]
   then
     echo "Nothing to do, your container has already started!"
     exit 0
   fi

   existing=`$docker_path ps -a | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
   if [ ! -z $existing ]
   then
     echo "starting up existing container"
     (
       set -x
       $docker_path start $config
     )
     exit 0
   fi

   set_volumes
   set_run_image
   set_boot_command

  set -x

  $docker_path run --shm-size=40G $attach_on_run $restart_policy \
    -e DOCKER_HOST_IP="$docker_ip" --name $config --privileged -t $volumes $user_args \
    $run_image $boot_command
   exit 0

}


case "$command" in
  enter)
      exec $docker_path exec -it $config /bin/zsh --login
      ;;

  stop)
      run_stop
      exit 0
      ;;

  restart)
      run_stop
      run_start
      exit 0
      ;;

  start)
      run_start
      exit 0
      ;;

  destroy)
      (set -x; $docker_path stop -t 10 $config && $docker_path rm $config) || (echo "$config was not found" && exit 0)
      exit 0
      ;;
esac

usage

